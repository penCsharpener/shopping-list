@page "/counter"
@using ShoppingList.Application.Abstractions
@using ShoppingList.Application.Models
@using ShoppingList.Application.Models.Selects
@using ShoppingList.Components.Selects

@if (_selectData is not null)
{
  <CategorySelect Categories="@_selectData.Categories" />
  <ShopSelect Shops="@_selectData.Shops" />
  <SubcategorySelect Subcategories="@_selectData.Subcategories" Value="@_selectedSubCategory" OnSelect="OnSelectHandler" />

  @if (_selectedSubCategory is not null)
  {
    <p>@_selectedSubCategory.Name</p>
  }
  else
  {
      <p>Subcategory is null</p>
  }

  <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="DebugHere">Debug</MudButton>


  @* <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudTextField T="string" Label="Name" Required="true" RequiredError="Item Name" />
    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                    Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                    InputType="InputType.Password"
                    Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                    RequiredError="Password is required!"/>
    <MudTextField T="string"
                    Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                    Validation="@(new Func<string, string>(PasswordMatch))"/>
    <div class="d-flex">
        <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
            <MudRadio Value="@("Personal")">Personal</MudRadio>
            <MudRadio Value="@("Professional")">Professional</MudRadio>
        </MudRadioGroup>
    </div>
    <div class="d-flex align-center justify-space-between">
        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!"  />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
    </div>
</MudForm>    *@
}

@code {
  private SelectData? _selectData;
  private Subcategory? _selectedSubCategory;

  [Inject] public required ISelectDataService DataService { get; set; }
  [Inject] public required IJsService JavaScriptService { get; set; }

  protected override async Task OnInitializedAsync()
  {
    _selectData = await DataService.GetData();
  }

  private async Task OnSelectHandler(Subcategory subcategory)
  {
    _selectedSubCategory = subcategory;
    Console.WriteLine(_selectedSubCategory.Name);
    await JavaScriptService.LogToConsoleTable(_selectedSubCategory);
    StateHasChanged();
  }

  private async Task DebugHere()
  {
    Console.WriteLine(_selectedSubCategory?.Name);
    await JavaScriptService.LogToConsoleTable(_selectedSubCategory);
    StateHasChanged();
  }
}
